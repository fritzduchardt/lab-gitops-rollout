apiVersion: v1
kind: ServiceAccount
metadata:
  name: home-assistant
  labels:
    helm.sh/chart: home-assistant-0.2.95
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/version: 2024.12.5
    app.kubernetes.io/managed-by: Helm
  namespace: home-assistant
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hass-configuration
  namespace: home-assistant
data:
  configuration.yaml: |
    # Loads default set of integrations. Do not remove.
    default_config:
    http:
      use_x_forwarded_for: true
      trusted_proxies:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
        - 127.0.0.0/8
    # Load frontend themes from the themes folder
    frontend:
      themes: !include_dir_merge_named themes

    automation: !include automations.yaml
    script: !include scripts.yaml
    scene: !include scenes.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-script
  namespace: home-assistant
data:
  init.sh: |
    #!/bin/bash
    set -e

    # Check if the configuration file exists
    if [ ! -f /config/configuration.yaml ]; then
      echo "Configuration file not found, creating a new one"
      cp /config-templates/configuration.yaml /config/configuration.yaml
    fi

    # Check if the force init is enabled
    forceInit="true"
    if [ "$forceInit" = "true" ]; then
      echo "Force init is enabled, overwriting the configuration file"
      current_time=$(date +%Y%m%d_%H%M%S)
      echo "Backup the current configuration file to configuration.yaml.$current_time"
      cp /config/configuration.yaml /config/configuration.yaml.$current_time
      echo "The current configuration file will be merged with the default configuration file with this content:"
      cat /config-templates/configuration.yaml
      if [[ ! -s /config/configuration.yaml ]]; then
        # If /config/configuration.yaml is empty, use the content of /config-templates/configuration.yaml
        cat /config-templates/configuration.yaml > /config/configuration.yaml
      else
        # Perform the merge operation if /config/configuration.yaml is not empty
        yq eval-all --inplace 'select(fileIndex == 0) *d select(fileIndex == 1)' /config/configuration.yaml /config-templates/configuration.yaml
      fi
    fi

    # Check if the automations file exists
    if [ ! -f /config/automations.yaml ]; then
      echo "Automations file not found, creating a new one"
      touch /config/automations.yaml
      echo "[]" >> /config/automations.yaml
    fi

    # Check if the scripts file exists
    if [ ! -f /config/scripts.yaml ]; then
      echo "Scripts file not found, creating a new one"
      touch /config/scripts.yaml
    fi

    # Check if the scenes file exists
    if [ ! -f /config/scenes.yaml ]; then
      echo "Scenes file not found, creating a new one"
      touch /config/scenes.yaml
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: home-assistant
  labels:
    helm.sh/chart: home-assistant-0.2.95
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/version: 2024.12.5
    app.kubernetes.io/managed-by: Helm
  namespace: home-assistant
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: home-assistant
  labels:
    helm.sh/chart: home-assistant-0.2.95
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/version: 2024.12.5
    app.kubernetes.io/managed-by: Helm
  namespace: home-assistant
spec:
  serviceName: home-assistant
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: home-assistant
      app.kubernetes.io/instance: home-assistant
  template:
    metadata:
      labels:
        app.kubernetes.io/name: home-assistant
        app.kubernetes.io/instance: home-assistant
      annotations:
        checksum/init-script: 14801f270793f75cc46aae4ffc5b76451529150ff248107f6c3f7395f8614ae1
        checksum/hass-configuration: 24e473b916085ad398aa2945119700d726c3a6814c503170bdaa366988a3cd4a
    spec:
      serviceAccountName: home-assistant
      securityContext: {}
      containers:
      - name: home-assistant
        securityContext:
          privileged: true
        image: ghcr.io/home-assistant/home-assistant:2024.12.5
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8123
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 2
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /config
          name: home-assistant
        - mountPath: /dev/ttyUSB0
          name: usb
      initContainers:
      - name: setup-config
        image: mikefarah/yq:4
        securityContext:
          runAsUser: 0
        command:
        - /bin/sh
        - -c
        args:
        - /bin/sh /mnt/init/init.sh
        volumeMounts:
        - name: init-volume
          mountPath: /mnt/init/init.sh
          subPath: init.sh
        - name: config-volume
          mountPath: /config-templates
        - mountPath: /config
          name: home-assistant
      nodeSelector:
        kubernetes.io/hostname: friclu-1
      volumes:
      - name: init-volume
        configMap:
          name: init-script
      - name: config-volume
        configMap:
          name: hass-configuration
      - hostPath:
          path: /dev/ttyUSB0
        name: usb
      - name: home-assistant
        persistentVolumeClaim:
          claimName: home-assistant
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: home-assistant
  labels:
    helm.sh/chart: home-assistant-0.2.95
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/version: 2024.12.5
    app.kubernetes.io/managed-by: Helm
  namespace: home-assistant
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - ha-friclu.duckdns.org
    secretName: ha-certificate
  rules:
  - host: ha-friclu.duckdns.org
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: home-assistant
            port:
              number: 8080
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ha-certificate
  namespace: home-assistant
spec:
  secretName: ha-certificate
  duration: 2160h
  renewBefore: 360h
  subject:
    organizations:
    - friclu
  dnsNames:
  - ha-friclu.duckdns.org
  issuerRef:
    name: duckdns-google-production
    kind: ClusterIssuer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: home-assistant
  namespace: home-assistant
spec:
  capacity:
    storage: 5Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /volumes/home-assistant
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: home-assistant
  labels:
    name: home-assistant
  namespace: home-assistant
spec:
  storageClassName: ""
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Namespace
metadata:
  name: home-assistant
